#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤, –æ–ø–µ—á–∞—Ç–æ–∫ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import json
import logging
import re
import sys
from typing import Dict, Any, Optional, List
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent))

from core.api_client import APIClient
from config.config_manager import ConfigManager


class DialogCleaner:
    """
    –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
    """
    
    def __init__(self, config_path: str = "config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª—è
        
        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config_manager = ConfigManager(config_path)
        self.api_client = APIClient(self.config_manager.get_api_config())
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        self.artifact_patterns = [
            r'[\u4e00-\u9fff]',  # –ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
            r'[\u3040-\u309f]',  # –•–∏—Ä–∞–≥–∞–Ω–∞ (—è–ø–æ–Ω—Å–∫–∏–π)
            r'[\u30a0-\u30ff]',  # –ö–∞—Ç–∞–∫–∞–Ω–∞ (—è–ø–æ–Ω—Å–∫–∏–π)
            r'[ÔøΩ]',  # –°–∏–º–≤–æ–ª—ã –∑–∞–º–µ–Ω—ã
        ]
        
        logging.info("üßπ DialogCleaner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def has_artifacts(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        """
        for pattern in self.artifact_patterns:
            if re.search(pattern, text):
                return True
        return False
    
    def build_cleaning_prompt(self, theme: str, text: str, language: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            theme: –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            language: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
        """
        language_names = {
            'ru': '—Ä—É—Å—Å–∫–æ–º',
            'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º', 
            'de': '–Ω–µ–º–µ—Ü–∫–æ–º',
            'fr': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º',
            'es': '–∏—Å–ø–∞–Ω—Å–∫–æ–º',
            'it': '–∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º',
            'zh': '–∫–∏—Ç–∞–π—Å–∫–æ–º',
            'ja': '—è–ø–æ–Ω—Å–∫–æ–º'
        }
        
        lang_name = language_names.get(language, language)
        
        prompt = f"""
–¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: "{theme}"

–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {lang_name} —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–µ/—è–ø–æ–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ–ø–µ—á–∞—Ç–∫–∏ –∏–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "{text}"

–ó–∞–¥–∞—á–∞:
1. –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ/—è–ø–æ–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –Ω–∞ {lang_name} —è–∑—ã–∫–µ
2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ–ø–µ—á–∞—Ç–∫–∏
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Å–º—ã—Å–ª –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
4. –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{{
    "cleaned_text": "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞"
}}

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –æ–±—ä–µ–∫—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
        return prompt.strip()
    
    def clean_single_line(self, theme: str, text: str, language: str) -> Optional[str]:
        """
        –û—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            theme: –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            language: –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            if not self.has_artifacts(text):
                return text
            
            logging.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: {text[:50]}...")
            
            prompt = self.build_cleaning_prompt(theme, text, language)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            response = self.api_client.generate_dialog(prompt, temperature=0.1)
            
            if response and 'cleaned_text' in response:
                cleaned_text = response['cleaned_text']
                logging.debug(f"‚úÖ –û—á–∏—â–µ–Ω–æ: {text[:30]}... ‚Üí {cleaned_text[:30]}...")
                return cleaned_text
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {response}")
                return text
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
            return text
    
    def clean_dialog_file(self, input_file: str, output_file: str, batch_size: int = 10) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
        
        Args:
            input_file: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
            output_file: –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            input_path = Path(input_file)
            output_path = Path(output_file)
            
            if not input_path.exists():
                logging.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
                return False
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            dialogs = []
            with open(input_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if line:
                        try:
                            data = json.loads(line)
                            dialogs.append(data)
                        except json.JSONDecodeError as e:
                            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
            
            total_dialogs = len(dialogs)
            cleaned_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            for i in range(0, total_dialogs, batch_size):
                batch = dialogs[i:i + batch_size]
                logging.info(f"üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i//batch_size + 1}/{(total_dialogs + batch_size - 1)//batch_size}")
                
                for dialog in batch:
                    try:
                        original_dialog = dialog.copy()
                        cleaned_dialog = self.clean_single_dialog(dialog)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if cleaned_dialog != original_dialog:
                            cleaned_count += 1
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        with open(output_path, 'a', encoding='utf-8') as f:
                            f.write(json.dumps(cleaned_dialog, ensure_ascii=False) + '\n')
                            
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        with open(output_path, 'a', encoding='utf-8') as f:
                            f.write(json.dumps(dialog, ensure_ascii=False) + '\n')
            
            logging.info(f"üéØ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_dialogs}, –æ—á–∏—â–µ–Ω–æ: {cleaned_count}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def clean_single_dialog(self, dialog_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            dialog_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        """
        try:
            if 'dialog' not in dialog_data or not isinstance(dialog_data['dialog'], list):
                return dialog_data
            
            cleaned_dialog = []
            theme = dialog_data.get('theme', '')
            language = dialog_data.get('language', 'ru')
            needs_cleaning = False
            
            for text in dialog_data['dialog']:
                if self.has_artifacts(text):
                    needs_cleaning = True
                    cleaned_text = self.clean_single_line(theme, text, language)
                    cleaned_dialog.append(cleaned_text)
                else:
                    cleaned_dialog.append(text)
            
            if needs_cleaning:
                dialog_data['dialog'] = cleaned_dialog
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ –æ—á–∏—Å—Ç–∫–µ
                dialog_data['cleaned'] = True
            
            return dialog_data
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return dialog_data
    
    def analyze_file_artifacts(self, input_file: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        
        Args:
            input_file: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º
        """
        try:
            input_path = Path(input_file)
            if not input_path.exists():
                return {"error": "File not found"}
            
            stats = {
                "total_dialogs": 0,
                "dialogs_with_artifacts": 0,
                "total_lines": 0,
                "lines_with_artifacts": 0,
                "artifact_types": {},
                "sample_artifacts": []
            }
            
            with open(input_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    
                    try:
                        data = json.loads(line)
                        stats["total_dialogs"] += 1
                        
                        if 'dialog' in data and isinstance(data['dialog'], list):
                            dialog_has_artifacts = False
                            
                            for text in data['dialog']:
                                stats["total_lines"] += 1
                                
                                for pattern in self.artifact_patterns:
                                    matches = re.findall(pattern, text)
                                    if matches:
                                        stats["lines_with_artifacts"] += 1
                                        dialog_has_artifacts = True
                                        
                                        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                                        artifact_type = "chinese" if '\u4e00' <= matches[0] <= '\u9fff' else \
                                                       "japanese_hiragana" if '\u3040' <= matches[0] <= '\u309f' else \
                                                       "japanese_katakana" if '\u30a0' <= matches[0] <= '\u30ff' else \
                                                       "replacement_char"
                                        
                                        stats["artifact_types"][artifact_type] = stats["artifact_types"].get(artifact_type, 0) + 1
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
                                        if len(stats["sample_artifacts"]) < 5:
                                            stats["sample_artifacts"].append({
                                                "text": text[:100],
                                                "artifacts": matches[:3]
                                            })
                                        break
                            
                            if dialog_has_artifacts:
                                stats["dialogs_with_artifacts"] += 1
                                
                    except json.JSONDecodeError:
                        continue
            
            return stats
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
            return {"error": str(e)}


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ—á–∏—Å—Ç–∫–∏
    """
    import argparse
    
    parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤')
    parser.add_argument('--input', '-i', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–∞–º–∏')
    parser.add_argument('--output', '-o', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
    parser.add_argument('--config', '-c', default='config.json', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--analyze', '-a', action='store_true', help='–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞')
    parser.add_argument('--batch-size', '-b', type=int, default=10, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    
    try:
        cleaner = DialogCleaner(args.config)
        
        if args.analyze and args.input:
            # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞
            stats = cleaner.analyze_file_artifacts(args.input)
            print("\nüìä –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ:")
            print(json.dumps(stats, ensure_ascii=False, indent=2))
            sys.exit(0)
            
        elif args.input and args.output:
            # –†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏
            success = cleaner.clean_dialog_file(args.input, args.output, args.batch_size)
            
            if success:
                logging.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {args.input} -> {args.output}")
                sys.exit(0)
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
                sys.exit(1)
        else:
            parser.print_help()
            sys.exit(1)
            
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()