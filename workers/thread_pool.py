"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import threading
import time
import logging
from typing import Dict, List, Any, Optional

from workers.worker_thread import WorkerThread
from storage.thread_safe_writer import ThreadSafeWriter


class ThreadPoolManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–ª–æ–º —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ graceful shutdown
    """
    
    def __init__(self, config: Dict[str, Any], writer: ThreadSafeWriter):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–∞–∫ dict)
            writer: –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π writer –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        self.config = config
        self.writer = writer
        self.workers: List[WorkerThread] = []
        
        # –ü—Ä–∏–º–∏—Ç–∏–≤—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self._pool_lock = threading.RLock()
        self._stats_lock = threading.Lock()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
        self._is_running = False
        self._shutdown_requested = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._total_groups_generated = 0
        self._successful_groups = 0
        self._failed_groups = 0
        self._start_time: Optional[float] = None
        
        logging.info("üîÑ ThreadPoolManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _update_stats_callback(self, success: bool) -> None:
        """
        Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        
        Args:
            success: True –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
        """
        self.update_stats(success)
    
    def start_generation(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø—É–ª–∞ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        
        Returns:
            True –µ—Å–ª–∏ –ø—É–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        """
        with self._pool_lock:
            if self._is_running:
                logging.warning("‚ö†Ô∏è –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            try:
                thread_count = self.config['generation']['threads']
                
                if thread_count <= 0:
                    logging.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
                    return False
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
                for i in range(thread_count):
                    worker = WorkerThread(
                        worker_id=i + 1,
                        config=self.config,
                        writer=self.writer,
                        stats_callback=self._update_stats_callback  # –î–æ–±–∞–≤–ª—è–µ–º callback
                    )
                    worker.start()
                    self.workers.append(worker)
                
                self._is_running = True
                self._shutdown_requested = False
                self._start_time = time.time()
                
                logging.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ {len(self.workers)} —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤")
                return True
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤: {e}")
                self._cleanup_workers()
                return False
    
    def stop_generation(self, timeout: float = 30.0) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        """
        with self._pool_lock:
            if not self._is_running:
                logging.info("‚ÑπÔ∏è –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            
            logging.info("üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤...")
            self._shutdown_requested = True
            self._is_running = False
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            for worker in self.workers:
                worker.request_stop()
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            all_stopped = self._wait_for_workers_stop(timeout)
            
            if all_stopped:
                logging.info("‚úÖ –í—Å–µ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–∫–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è")
            
            self._cleanup_workers()
            return all_stopped
    
    def _wait_for_workers_stop(self, timeout: float) -> bool:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        
        Args:
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            alive_workers = [w for w in self.workers if w.is_alive()]
            
            if not alive_workers:
                return True
            
            logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {len(alive_workers)} –ø–æ—Ç–æ–∫–æ–≤...")
            time.sleep(1)
        
        # –§–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Ç–æ–∫–æ–≤
        alive_workers = [w for w in self.workers if w.is_alive()]
        for worker in alive_workers:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ {worker.worker_id}")
        
        return len(alive_workers) == 0
    
    def _cleanup_workers(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            for worker in self.workers:
                if hasattr(worker, 'cleanup'):
                    worker.cleanup()
            
            self.workers.clear()
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—É–ª–∞: {e}")
    
    def update_stats(self, success: bool) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Args:
            success: True –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
        """
        with self._stats_lock:
            self._total_groups_generated += 1
            if success:
                self._successful_groups += 1
            else:
                self._failed_groups += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 10-—é —É—Å–ø–µ—à–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if success and self._successful_groups % 10 == 0:
                logging.info(f"üìà –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥—Ä—É–ø–ø: {self._successful_groups}")
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        with self._stats_lock:
            active_workers = len([w for w in self.workers if w.is_alive() and getattr(w, 'is_working', False)])
            
            stats = {
                'total_pairs': self._total_groups_generated,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å total_pairs
                'successful_pairs': self._successful_groups,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å successful_pairs
                'failed_pairs': self._failed_groups,          # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å failed_pairs
                'active_workers': active_workers,
                'total_workers': len(self.workers),
                'success_rate': 0,
                'is_running': self._is_running,
                'shutdown_requested': self._shutdown_requested
            }
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞
            if self._total_groups_generated > 0:
                stats['success_rate'] = (self._successful_groups / self._total_groups_generated) * 100
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            if self._start_time:
                stats['uptime_seconds'] = time.time() - self._start_time
            
            return stats
    
    def is_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—É–ª
        
        Returns:
            True –µ—Å–ª–∏ –ø—É–ª –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self._is_running and not self._shutdown_requested
    
    def get_active_worker_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        """
        return len([w for w in self.workers if w.is_alive() and getattr(w, 'is_working', False)])
    
    def restart_failed_workers(self) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–ø–∞–≤—à–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        """
        with self._pool_lock:
            if not self._is_running or self._shutdown_requested:
                return
            
            for i, worker in enumerate(self.workers):
                if not worker.is_alive():
                    logging.warning(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–ø–∞–≤—à–µ–≥–æ –ø–æ—Ç–æ–∫–∞ {worker.worker_id}")
                    
                    try:
                        new_worker = WorkerThread(
                            worker_id=worker.worker_id,
                            config=self.config,
                            writer=self.writer,
                            stats_callback=self._update_stats_callback  # –î–æ–±–∞–≤–ª—è–µ–º callback
                        )
                        new_worker.start()
                        self.workers[i] = new_worker
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ {worker.worker_id}: {e}")
    
    def monitor_workers_health(self) -> Dict[str, Any]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ç–æ–∫–æ–≤
        """
        health_stats = {
            'total_workers': len(self.workers),
            'alive_workers': 0,
            'working_workers': 0,
            'failed_workers': 0,
            'worker_details': []
        }
        
        for worker in self.workers:
            worker_info = {
                'worker_id': worker.worker_id,
                'is_alive': worker.is_alive(),
                'is_working': getattr(worker, 'is_working', False),
                'error_count': getattr(worker, 'error_count', 0),
                'generated_count': getattr(worker, 'generated_count', 0)
            }
            health_stats['worker_details'].append(worker_info)
            
            if worker.is_alive():
                health_stats['alive_workers'] += 1
                if getattr(worker, 'is_working', False):
                    health_stats['working_workers'] += 1
            else:
                health_stats['failed_workers'] += 1
        
        return health_stats
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ context manager"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞"""
        self.stop_generation()