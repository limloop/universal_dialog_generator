"""
–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
"""

import threading
import time
import logging
import random
from typing import Dict, Any, Optional, Callable

from core.theme_generator import ThemeGenerator
from core.prompt_engine import PromptEngine
from core.api_client import APIClient
from core.validator import UniversalJsonValidator
from storage.thread_safe_writer import ThreadSafeWriter


class WorkerThread(threading.Thread):
    """
    –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, 
                 worker_id: int,
                 config: Dict[str, Any],
                 writer: ThreadSafeWriter,
                 stats_callback: Optional[Callable[[bool], None]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        
        Args:
            worker_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            writer: –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π writer –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            stats_callback: Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        super().__init__(name=f"Worker-{worker_id}", daemon=True)
        
        self.worker_id = worker_id
        self.config = config
        self.writer = writer
        self.stats_callback = stats_callback
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        self._stop_requested = False
        self.is_working = False
        self.error_count = 0
        self.generated_count = 0
        self.consecutive_errors = 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        self.max_consecutive_errors = config['generation'].get('max_errors', 10)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_components()
        
        logging.debug(f"üîß Worker {worker_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º
            prompt_templates = self.config['prompt_templates']
            self.theme_generator = ThemeGenerator(
                templates=prompt_templates['templates'],
                word_banks=prompt_templates['words']
            )
            
            # –î–≤–∏–∂–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
            self.prompt_engine = PromptEngine(
                base_template=prompt_templates['base'],
                output_schema=self.config['output_schema'],
                line_range=self.config['generation']['dialog_lines']
            )
            
            # API –∫–ª–∏–µ–Ω—Ç
            self.api_client = APIClient(self.config['api'])
            
            # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
            self.validator = UniversalJsonValidator(self.config['output_schema'])
            
        except Exception as e:
            logging.error(f"‚ùå Worker {self.worker_id}: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def run(self) -> None:
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        """
        logging.info(f"üöÄ Worker {self.worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        while not self._stop_requested and self.consecutive_errors < self.max_consecutive_errors:
            try:
                self.is_working = True
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–∞–Ω–Ω—ã—Ö
                success = self._generate_single_group()
                
                if success:
                    self.generated_count += 1
                    self.consecutive_errors = 0
                    logging.debug(f"‚úÖ Worker {self.worker_id}: –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã #{self.generated_count}")
                else:
                    self.error_count += 1
                    self.consecutive_errors += 1
                    logging.warning(f"‚ö†Ô∏è Worker {self.worker_id}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö: {self.consecutive_errors})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—É–ª–µ
                if self.stats_callback:
                    self.stats_callback(success)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                if not self._stop_requested:
                    delay = random.uniform(1.0, 3.0)
                    time.sleep(delay)
                    
            except Exception as e:
                self.error_count += 1
                self.consecutive_errors += 1
                logging.error(f"‚ùå Worker {self.worker_id}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–± –æ—à–∏–±–∫–µ
                if self.stats_callback:
                    self.stats_callback(False)
                    
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        self.is_working = False
        
        if self._stop_requested:
            logging.info(f"üîö Worker {self.worker_id}: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        elif self.consecutive_errors >= self.max_consecutive_errors:
            logging.error(f"üí• Worker {self.worker_id}: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫")
        else:
            logging.info(f"üîö Worker {self.worker_id}: –ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def _generate_single_group(self) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
        
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        """
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã
            theme = self.theme_generator.generate_theme()
            
            languages = self.config['generation']['languages']
            successful_items = 0
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
            for lang_config in languages:
                if self._stop_requested:
                    return False
                
                data_item = self._generate_single_item(
                    language_code=lang_config['code'],
                    language_name=lang_config['name'],
                    theme=theme
                )
                
                if data_item:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    data_item['theme'] = theme
                    data_item['worker_id'] = self.worker_id
                    
                    # –§–ò–õ–¨–¢–†–£–ï–ú –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ output_schema
                    filtered_data = self.validator.filter_output_fields(data_item)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if self.writer.write_dialog(filtered_data):
                        successful_items += 1
                    else:
                        logging.error(f"‚ùå Worker {self.worker_id}: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö")
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏
                if not self._stop_requested:
                    time.sleep(0.2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
            success = successful_items == len(languages)
            
            if success:
                logging.info(f"üéØ Worker {self.worker_id}: –ì—Ä—É–ø–ø–∞ —Ç–µ–º '{theme}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(languages)} —è–∑—ã–∫–æ–≤)")
            else:
                logging.warning(f"‚ö†Ô∏è Worker {self.worker_id}: –ì—Ä—É–ø–ø–∞ —Ç–µ–º '{theme}' —á–∞—Å—Ç–∏—á–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({successful_items}/{len(languages)})")
            
            return success
            
        except Exception as e:
            logging.error(f"‚ùå Worker {self.worker_id}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def _generate_single_item(self, 
                            language_code: str, 
                            language_name: str,
                            theme: str) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
        """
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            temp_config = self.config['generation']['temperature']
            temperature = random.uniform(temp_config['min'], temp_config['max'])
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            prompt = self.prompt_engine.build_prompt(
                language_code=language_code,
                language_name=language_name,
                theme=theme
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
            response_data = self.api_client.generate_dialog(
                prompt=prompt,
                temperature=temperature
            )
            
            if not response_data:
                logging.warning(f"‚ö†Ô∏è Worker {self.worker_id}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API –¥–ª—è {language_code}")
                return None
            
            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–æ–≤)
            if not self._validate_data(response_data):
                logging.warning(f"‚ö†Ô∏è Worker {self.worker_id}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {language_code}")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω—É–∂–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ output_schema)
            response_data['language'] = language_code
            response_data['temperature'] = round(temperature, 4)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            response_data['timestamp'] = time.time()
            
            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ 'dialog' - –æ—á–∏—â–∞–µ–º, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
            if 'dialog' in response_data:
                response_data['dialog'] = self.validator.sanitize_replicas(response_data['dialog'])
            
            logging.debug(f"‚úÖ Worker {self.worker_id}: –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {language_code}")
            return response_data
            
        except Exception as e:
            logging.error(f"‚ùå Worker {self.worker_id}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {language_code}: {e}")
            return None

    def _validate_data(self, data: Dict[str, Any]) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤
            if hasattr(self.validator, 'validate_dialog'):
                return self.validator.validate_dialog(data)
            else:
                # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ validate_dialog, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                return self._basic_data_validation(data)
                
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Worker {self.worker_id}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: {e}")
            return self._basic_data_validation(data)
    
    def _basic_data_validation(self, data: Dict[str, Any]) -> bool:
        """
        –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        """
        if not isinstance(data, dict):
            logging.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
            return False
        
        if not data:
            logging.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –∏–∑ output_schema
        required_fields = self.config['output_schema'].get('fields', [])
        if required_fields:
            has_required_field = any(field in data for field in required_fields)
            if not has_required_field:
                logging.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—Å–µ –ø–æ–ª—è –∏–∑ output_schema: {required_fields}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
        has_content = any(
            bool(value) and (not isinstance(value, str) or value.strip()) 
            for value in data.values()
        )
        
        if not has_content:
            logging.warning("‚ö†Ô∏è –í—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ")
            return False
        
        return True
    
    def request_stop(self) -> None:
        """
        –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—Ç–æ–∫–∞
        """
        self._stop_requested = True
        self.is_working = False
        logging.debug(f"üõë Worker {self.worker_id}: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
    
    def cleanup(self) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Ç–æ–∫–∞
        """
        try:
            if hasattr(self, 'api_client'):
                self.api_client.cleanup()
            
            self.is_working = False
            logging.debug(f"üßπ Worker {self.worker_id}: –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logging.error(f"‚ùå Worker {self.worker_id}: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'worker_id': self.worker_id,
            'is_alive': self.is_alive(),
            'is_working': self.is_working,
            'generated_count': self.generated_count,
            'error_count': self.error_count,
            'consecutive_errors': self.consecutive_errors,
            'stop_requested': self._stop_requested
        }
    
    def __repr__(self) -> str:
        return f"WorkerThread(id={self.worker_id}, alive={self.is_alive()}, working={self.is_working})"