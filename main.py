#!/usr/bin/env python3
"""
Universal Dialog Generator
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ multiple —è–∑—ã–∫–∞—Ö
"""

import logging
import sys
import time
import signal
import traceback
from typing import Optional

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config.config_manager import ConfigManager
from storage.thread_safe_writer import ThreadSafeWriter
from workers.thread_pool import ThreadPoolManager


class UniversalDialogGenerator:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    """
    
    def __init__(self, config_path: str = "config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_path = config_path
        self.config_manager: Optional[ConfigManager] = None
        self.writer: Optional[ThreadSafeWriter] = None
        self.pool_manager: Optional[ThreadPoolManager] = None
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
        self._setup_signal_handlers()
        
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
    def _signal_handler(self, signum, frame) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logging.info(f"üì≠ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        self.running = False
        self.stop()
        
    def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logging.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.config_manager = ConfigManager(self.config_path)
            
            if not self.config_manager.validate_config():
                logging.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
                return False
                
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è writer'–∞
            output_file = self.config_manager.get_output_filename()
            logging.info(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
            self.writer = ThreadSafeWriter(output_file)
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
            self.pool_manager = ThreadPoolManager(
                config=self.config_manager.config,
                writer=self.writer
            )
            
            logging.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            logging.debug(traceback.format_exc())
            return False
    
    def run(self) -> int:
        """
        –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not self.initialize():
            return 1
            
        # –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤...")
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
            self.pool_manager.start_generation()
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            return self._main_loop()
            
        except Exception as e:
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            logging.debug(traceback.format_exc())
            return 1
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
            self.stop()
    
    def _main_loop(self) -> int:
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Returns:
            –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        last_stats_time = 0
        stats_interval = 10  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        while self.running:
            try:
                current_time = time.time()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if current_time - last_stats_time >= stats_interval:
                    if self.pool_manager:
                        stats = self.pool_manager.get_stats()
                        self._print_progress(stats)
                    last_stats_time = current_time
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
                if self.pool_manager and not self.pool_manager.is_running():
                    logging.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")
                    break
                    
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
                time.sleep(0.5)
                
            except KeyboardInterrupt:
                logging.info("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
                break
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        return 0
    
    def _print_progress(self, stats: dict) -> None:
        """
        –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            total_pairs = stats.get('total_pairs', 0)
            successful_pairs = stats.get('successful_pairs', 0)
            failed_pairs = stats.get('failed_pairs', 0)
            active_workers = stats.get('active_workers', 0)
            
            success_rate = (successful_pairs / total_pairs * 100) if total_pairs > 0 else 0
            
            logging.info(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {successful_pairs} —É—Å–ø–µ—à–Ω—ã—Ö, "
                f"{failed_pairs} –æ—à–∏–±–æ–∫, "
                f"{active_workers} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤, "
                f"{success_rate:.1f}% —É—Å–ø–µ—Ö–∞"
            )
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def stop(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
            if self.pool_manager:
                self.pool_manager.stop_generation()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º writer
            if self.writer:
                self.writer.close()
                
            logging.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ context manager"""
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.stop()


def setup_logging() -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - [%(threadName)s] %(message)s',
        datefmt='%H:%M:%S',
        handlers=[
            logging.FileHandler('generator.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à—É–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('openai').setLevel(logging.WARNING)


def main() -> int:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    Returns:
        –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    setup_logging()
    
    logging.info("üé¨ –ó–∞–ø—É—Å–∫ Universal Dialog Generator")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º context manager –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        with UniversalDialogGenerator("config.json") as generator:
            return generator.run()
            
    except Exception as e:
        logging.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.debug(traceback.format_exc())
        return 1


if __name__ == "__main__":
    exit_code = main()
    logging.info(f"üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º: {exit_code}")
    sys.exit(exit_code)