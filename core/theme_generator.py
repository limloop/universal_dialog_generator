"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–ª–æ–≤–∞—Ä–µ–π —Å–ª–æ–≤
"""

import logging
import random
import re
from typing import List, Dict, Any
from threading import RLock


class ThemeGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–ª–æ–≤–∞—Ä–µ–π —Å–ª–æ–≤
    """
    
    def __init__(self, templates: List[str], word_banks: Dict[str, List[str]]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–º
        
        Args:
            templates: –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ–º —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
            word_banks: –°–ª–æ–≤–∞—Ä–∏ —Å–ª–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        """
        self.templates = templates
        self.word_banks = word_banks
        self._lock = RLock()  # –î–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._validate_components()
        
        logging.debug("üé® ThemeGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _validate_components(self) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–ª–æ–≤–∞—Ä–µ–π —Å–ª–æ–≤
        """
        if not self.templates:
            raise ValueError("–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not self.word_banks:
            raise ValueError("–°–ª–æ–≤–∞—Ä–∏ —Å–ª–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—è—Ö
        for i, template in enumerate(self.templates):
            placeholders = self._extract_placeholders(template)
            for placeholder in placeholders:
                if placeholder not in self.word_banks:
                    raise ValueError(
                        f"–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä '{placeholder}' –≤ —à–∞–±–ª–æ–Ω–µ {i} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—è—Ö —Å–ª–æ–≤. "
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏: {list(self.word_banks.keys())}"
                    )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ–≤–∞—Ä–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        for key, words in self.word_banks.items():
            if not words:
                raise ValueError(f"–°–ª–æ–≤–∞—Ä—å '{key}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    def _extract_placeholders(self, template: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template: –®–∞–±–ª–æ–Ω —Ç–µ–º—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        """
        return re.findall(r'\{(\w+)\}', template)
    
    def generate_theme(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã
        
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞
        """
        with self._lock:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
                template = random.choice(self.templates)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                theme = template
                placeholders = self._extract_placeholders(template)
                
                for placeholder in placeholders:
                    if placeholder in self.word_banks:
                        word = random.choice(self.word_banks[placeholder])
                        theme = theme.replace(f"{{{placeholder}}}", word, 1)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                remaining_placeholders = self._extract_placeholders(theme)
                if remaining_placeholders:
                    logging.warning(
                        f"‚ö†Ô∏è –í —Ç–µ–º–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {remaining_placeholders}. "
                        f"–¢–µ–º–∞: '{theme}'"
                    )
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                    for placeholder in remaining_placeholders:
                        fallback_word = "–æ–±—Å—É–∂–¥–µ–Ω–∏–µ"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        theme = theme.replace(f"{{{placeholder}}}", fallback_word, 1)
                
                logging.debug(f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ–º–∞: {theme}")
                return theme
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                return "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    
    def get_available_templates_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
        """
        return len(self.templates)
    
    def get_word_bank_stats(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—è–º —Å–ª–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–∞—Ä–µ
        """
        return {key: len(words) for key, words in self.word_banks.items()}
    
    def validate_template(self, template: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template: –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            placeholders = self._extract_placeholders(template)
            for placeholder in placeholders:
                if placeholder not in self.word_banks:
                    return False
            return True
        except Exception:
            return False
    
    def add_template(self, template: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template: –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            
        Returns:
            True –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        """
        with self._lock:
            try:
                if self.validate_template(template):
                    self.templates.append(template)
                    logging.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω: {template}")
                    return True
                else:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω: {template}")
                    return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
                return False
    
    def add_words_to_bank(self, bank_name: str, words: List[str]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            bank_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
            words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        """
        with self._lock:
            try:
                if bank_name not in self.word_banks:
                    self.word_banks[bank_name] = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                existing_words = set(self.word_banks[bank_name])
                new_words = [word for word in words if word not in existing_words]
                
                self.word_banks[bank_name].extend(new_words)
                
                logging.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_words)} —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å '{bank_name}'")
                return True
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å '{bank_name}': {e}")
                return False
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'templates_count': self.get_available_templates_count(),
            'word_banks': self.get_word_bank_stats(),
            'total_combinations': self._calculate_total_combinations()
        }
    
    def _calculate_total_combinations(self) -> int:
        """
        –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ç–µ–º
        
        Returns:
            –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        """
        total = 0
        for template in self.templates:
            placeholders = self._extract_placeholders(template)
            combinations = 1
            for placeholder in placeholders:
                if placeholder in self.word_banks:
                    combinations *= len(self.word_banks[placeholder])
            total += combinations
        return total