"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ API —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import logging
import time
import random
from typing import Dict, Any, Optional, List
from openai import OpenAI
from openai.types.chat import ChatCompletion
import requests.exceptions


class APIClient:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, api_config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
        """
        self.api_config = api_config
        self.client: Optional[OpenAI] = None
        self._initialize_client()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.request_count = 0
        self.successful_requests = 0
        self.failed_requests = 0
        self.total_tokens_used = 0
        
        # Retry –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.max_retries = 3
        self.base_delay = 1.0
        self.max_delay = 10.0
        
        logging.debug("üåê APIClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _initialize_client(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            self.client = OpenAI(
                base_url=self.api_config.get('base_url', 'https://api.openai.com/v1'),
                api_key=self.api_config.get('api_key'),
                timeout=self.api_config.get('timeout', 30.0),
                max_retries=0  # –ú—ã —Å–∞–º–∏ —Ä–µ–∞–ª–∏–∑—É–µ–º retry –ª–æ–≥–∏–∫—É
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    def generate_dialog(self, prompt: str, temperature: float) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ API
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        self.request_count += 1
        
        for attempt in range(self.max_retries + 1):
            try:
                response = self._make_api_call(prompt, temperature, attempt)
                
                if response and response.choices:
                    self.successful_requests += 1
                    return self._process_response(response)
                else:
                    logging.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
            except Exception as e:
                self.failed_requests += 1
                error_message = f"–û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries + 1}): {e}"
                
                if attempt < self.max_retries:
                    delay = self._calculate_retry_delay(attempt)
                    logging.warning(f"‚ö†Ô∏è {error_message}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å")
                    time.sleep(delay)
                else:
                    logging.error(f"‚ùå {error_message}. –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
        
        return None
    
    def _make_api_call(self, prompt: str, temperature: float, attempt: int) -> Optional[ChatCompletion]:
        """
        –í—ã–∑–æ–≤ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            attempt: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            
        Returns:
            –û—Ç–≤–µ—Ç API –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π timeout –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø—ã—Ç–∫–∏
            dynamic_timeout = self.api_config.get('timeout', 30) * (attempt + 1)
            
            response = self.client.chat.completions.create(
                model=self.api_config['model'],
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                temperature=temperature,
                max_tokens=self.api_config.get('max_tokens', 2000),
                timeout=dynamic_timeout,
                response_format={"type": "json_object"}
            )
            
            return response
            
        except requests.exceptions.Timeout:
            raise Exception(f"Timeout ({dynamic_timeout}—Å)")
        except requests.exceptions.ConnectionError:
            raise Exception("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 429:
                raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (rate limit)")
            elif e.response.status_code == 401:
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            elif e.response.status_code == 403:
                raise Exception("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            else:
                raise Exception(f"HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}")
        except Exception as e:
            raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def _process_response(self, response: ChatCompletion) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç API
            
        Returns:
            –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            content = response.choices[0].message.content.strip()
            
            if not content:
                logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ API")
                return None
            
            # –ü–∞—Ä—Å–∏–º JSON
            import json
            data = json.loads(content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
            if response.usage:
                self.total_tokens_used += response.usage.total_tokens
            
            logging.debug(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API, —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens if response.usage else 'N/A'}")
            return data
            
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}")
            logging.debug(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {content[:200]}...")
            return None
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API: {e}")
            return None
    
    def _calculate_retry_delay(self, attempt: int) -> float:
        """
        –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è retry —Å exponential backoff –∏ jitter
        
        Args:
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
            
        Returns:
            –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # Exponential backoff
        delay = self.base_delay * (2 ** attempt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)
        jitter = random.uniform(0.1, 0.3) * delay
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        final_delay = min(delay + jitter, self.max_delay)
        
        return final_delay
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.client.models.list(limit=1)
            logging.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            return False
    
    def get_usage_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_requests = self.request_count
        success_rate = (self.successful_requests / total_requests * 100) if total_requests > 0 else 0
        
        return {
            'total_requests': total_requests,
            'successful_requests': self.successful_requests,
            'failed_requests': self.failed_requests,
            'success_rate': round(success_rate, 1),
            'total_tokens_used': self.total_tokens_used,
            'estimated_cost': self._estimate_cost()
        }
    
    def _estimate_cost(self) -> float:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        
        Returns:
            –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
        """
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å)
        model_prices = {
            'gpt-3.5-turbo': 0.002,  # $0.002 per 1K tokens
            'gpt-4': 0.03,            # $0.03 per 1K tokens
            'gpt-4-turbo': 0.01,      # $0.01 per 1K tokens
        }
        
        model = self.api_config.get('model', 'gpt-3.5-turbo')
        price_per_1k = model_prices.get(model, 0.002)
        
        cost = (self.total_tokens_used / 1000) * price_per_1k
        return round(cost, 4)
    
    def cleanup(self) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            if self.client:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if hasattr(self.client, '_session') and self.client._session:
                    self.client._session.close()
                
            logging.debug("üßπ APIClient —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ APIClient: {e}")
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ context manager"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.cleanup()