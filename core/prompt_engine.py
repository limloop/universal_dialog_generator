"""
–î–≤–∏–∂–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multiple —è–∑—ã–∫–æ–≤ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import logging
import json
from typing import Dict, Any, Optional
from string import Template
import re


class PromptEngine:
    """
    –î–≤–∏–∂–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    """
    
    def __init__(self, 
                 base_template: str, 
                 output_schema: Dict[str, Any],
                 line_range: Dict[str, int]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            base_template: –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
            output_schema: –°—Ö–µ–º–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            line_range: –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ø–ª–∏–∫
        """
        self.base_template = base_template
        self.output_schema = output_schema
        self.line_range = line_range
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._validate_components()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._prepare_output_example()
        
        logging.debug("üí¨ PromptEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _validate_components(self) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–≤–∏–∂–∫–∞
        """
        if not self.base_template.strip():
            raise ValueError("–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if 'example' not in self.output_schema:
            raise ValueError("–í output_schema –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä (example)")
        
        if 'min' not in self.line_range or 'max' not in self.line_range:
            raise ValueError("line_range –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å min –∏ max –∑–Ω–∞—á–µ–Ω–∏—è")
        
        if self.line_range['min'] > self.line_range['max']:
            raise ValueError("min –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ max –≤ line_range")
        
        if self.line_range['min'] < 2:
            raise ValueError("min lines –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 2")
    
    def _prepare_output_example(self) -> None:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä JSON
            self.output_example = json.dumps(
                self.output_schema['example'], 
                ensure_ascii=False, 
                indent=2
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ output example: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä
            self.output_example = json.dumps({
                "theme": "–ü—Ä–∏–º–µ—Ä —Ç–µ–º—ã",
                "dialog": ["–†–µ–ø–ª–∏–∫–∞ 1", "–†–µ–ø–ª–∏–∫–∞ 2"],
                "language": "ru"
            }, ensure_ascii=False, indent=2)
    
    def build_prompt(self, 
                    language_code: str, 
                    language_name: str, 
                    theme: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            language_code: –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, etc.)
            language_name: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
            theme: –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        """
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
            template_params = {
                'language_name': language_name,
                'theme': theme,
                'min_lines': self.line_range['min'],
                'max_lines': self.line_range['max'],
                'output_example': self.output_example
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ Template
            prompt_template = Template(self.base_template)
            prompt = prompt_template.safe_substitute(template_params)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞
            format_section = self._build_format_section()
            full_prompt = f"{prompt}\n\n{format_section}"
            
            logging.debug(f"üí¨ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è {language_code} (—Ç–µ–º–∞: {theme})")
            return full_prompt
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è {language_code}: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            return self._build_fallback_prompt(language_name, theme)
    
    def _build_format_section(self) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É
        """
        required_fields = self.output_schema.get('fields', [])
        
        format_section = [
            "–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:",
            "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å JSON –æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:",
            self.output_example,
        ]
        
        if required_fields:
            format_section.append(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(required_fields)}")
        
        format_section.extend([
            "–£–±–µ–¥–∏—Å—å —á—Ç–æ:",
            f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫: {self.line_range['min']}-{self.line_range['max']}",
            "- –í—Å–µ —Ä–µ–ø–ª–∏–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ 'dialog'",
            "- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–µ—Ñ–∏–∫—Å—ã (User:, Assistant: –∏ —Ç.–¥.)",
            "- JSON –≤–∞–ª–∏–¥–µ–Ω –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω"
        ])
        
        return "\n".join(format_section)
    
    def _build_fallback_prompt(self, language_name: str, theme: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        
        Args:
            language_name: –ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
            theme: –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        """
        return f"""
–°–æ–∑–¥–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ {language_name} —è–∑—ã–∫–µ –Ω–∞ —Ç–µ–º—É: "{theme}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
- {self.line_range['min']}-{self.line_range['max']} —Ä–µ–ø–ª–∏–∫
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ engaging —Ä–∞–∑–≥–æ–≤–æ—Ä
- –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –ø–µ—Ä–µ–¥ —Ä–µ–ø–ª–∏–∫–∞–º–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{{
    "language": "{language_name}",
    "theme": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ",
    "dialog": ["—Ä–µ–ø–ª–∏–∫–∞ 1", "—Ä–µ–ø–ª–∏–∫–∞ 2", ...]
}}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""
    
    def validate_prompt_length(self, prompt: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞
        """
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ)
        estimated_tokens = len(prompt) // 4
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π ~4000 —Ç–æ–∫–µ–Ω–æ–≤
        if estimated_tokens > 3500:
            logging.warning(f"‚ö†Ô∏è –î–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ~{estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            return False
        
        return True
    
    def get_prompt_stats(self, prompt: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        lines = prompt.split('\n')
        words = prompt.split()
        
        return {
            'characters': len(prompt),
            'lines': len(lines),
            'words': len(words),
            'estimated_tokens': len(prompt) // 4,
            'has_format_section': '–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:' in prompt,
            'has_json_example': self.output_example[:50] in prompt
        }
    
    def add_custom_instructions(self, prompt: str, instructions: str) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –ø—Ä–æ–º–ø—Ç—É
        
        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            instructions: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        if not instructions.strip():
            return prompt
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–µ–∫—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞
        if "–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:" in prompt:
            sections = prompt.split("–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:")
            updated_prompt = f"{sections[0]}\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n{instructions}\n\n–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:{sections[1]}"
            return updated_prompt
        else:
            return f"{prompt}\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n{instructions}"
    
    def create_system_prompt(self) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        
        Returns:
            –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å engaging –¥–∏–∞–ª–æ–≥–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã, —Å–ª–µ–¥—É—è —Å—Ç—Ä–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –î–∏–∞–ª–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–æ–≥–∏—á–Ω—ã–º, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
3. –°–ª–µ–¥—É–π —Å—Ç—Ä–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –≤—ã–≤–æ–¥–∞
4. –ù–µ –¥–æ–±–∞–≤–ª—è–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫—Ä–æ–º–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ JSON
5. –£–±–µ–¥–∏—Å—å —á—Ç–æ JSON –≤–∞–ª–∏–¥–µ–Ω –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"""
    
    def get_engine_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–∂–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'base_template_length': len(self.base_template),
            'output_example_length': len(self.output_example),
            'line_range': self.line_range,
            'output_fields': self.output_schema.get('fields', [])
        }