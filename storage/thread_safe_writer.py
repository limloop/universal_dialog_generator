"""
–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π writer —Å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
import logging
import threading
import time
import fcntl  # –î–ª—è Linux/MacOS —Ñ–∞–π–ª–æ–≤—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
import platform
from typing import Dict, Any, Optional
from pathlib import Path
import errno


class FileLockException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, message: str, filename: Optional[str] = None, 
                 error_code: Optional[int] = None, system: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            error_code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –û–° (errno)
            system: –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        """
        self.message = message
        self.filename = filename
        self.error_code = error_code
        self.system = system or platform.system()
        
        # –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        error_details = []
        if filename:
            error_details.append(f"file: {filename}")
        if error_code:
            error_details.append(f"error_code: {error_code}")
        if system:
            error_details.append(f"system: {system}")
            
        full_message = f"{message}"
        if error_details:
            full_message += f" [{', '.join(error_details)}]"
            
        super().__init__(full_message)
    
    def __str__(self) -> str:
        return self.args[0] if self.args else self.message
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            "error": self.message,
            "filename": self.filename,
            "error_code": self.error_code,
            "system": self.system
        }


class CrossPlatformFileLock:
    """
    –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ñ–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è Linux/Windows/MacOS
    """
    
    def __init__(self, filename: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        
        Args:
            filename: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        self.filename = filename
        self.lockfile = f"{filename}.lock"
        self._lock_file = None
        self._is_locked = False
        self._system = platform.system().lower()
        
    def acquire(self, timeout: float = 10.0) -> bool:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞
            
        Raises:
            FileLockException: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                if self._system == "windows":
                    return self._acquire_windows()
                else:
                    return self._acquire_unix()
            except (IOError, OSError) as e:
                if e.errno != errno.EAGAIN:
                    raise FileLockException(
                        f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
                        filename=self.filename,
                        error_code=e.errno,
                        system=self._system
                    )
                time.sleep(0.1)
        
        # –¢–∞–π–º–∞—É—Ç
        raise FileLockException(
            f"–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
            filename=self.filename,
            system=self._system
        )
    
    def _acquire_unix(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö (Linux/MacOS)"""
        try:
            self._lock_file = open(self.lockfile, 'w')
            
            try:
                fcntl.flock(self._lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                self._is_locked = True
                return True
            except (IOError, OSError) as e:
                self._lock_file.close()
                self._lock_file = None
                # –ö–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if e.errno in [errno.EAGAIN, errno.EACCES]:
                    return False  # –§–∞–π–ª —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                else:
                    raise FileLockException(
                        f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞",
                        filename=self.filename,
                        error_code=e.errno,
                        system=self._system
                    )
        except Exception as e:
            if not isinstance(e, FileLockException):
                raise FileLockException(
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞: {e}",
                    filename=self.filename,
                    system=self._system
                )
            raise

    def _acquire_windows(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ Windows"""
        try:
            # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            self._lock_file = os.open(self.lockfile, os.O_CREAT | os.O_EXCL | os.O_RDWR)
            self._is_locked = True
            return True
        except (IOError, OSError) as e:
            if e.errno == errno.EEXIST:
                return False  # –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–Ω—è—Ç–∞
            else:
                raise FileLockException(
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ Windows",
                    filename=self.filename,
                    error_code=e.errno,
                    system=self._system
                )
        except Exception as e:
            raise FileLockException(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –Ω–∞ Windows: {e}",
                filename=self.filename,
                system=self._system
            )

    def release(self) -> None:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if not self._is_locked:
            return
            
        try:
            if self._system == "windows" and self._lock_file:
                os.close(self._lock_file)
                os.unlink(self.lockfile)
            elif self._lock_file:
                fcntl.flock(self._lock_file.fileno(), fcntl.LOCK_UN)
                self._lock_file.close()
                if os.path.exists(self.lockfile):
                    os.unlink(self.lockfile)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        finally:
            self._is_locked = False
            self._lock_file = None
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ context manager"""
        self.acquire()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        self.release()


class ThreadSafeWriter:
    """
    –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π writer —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
    """
    
    def __init__(self, 
                 filename: str, 
                 max_file_size_mb: int = 100,
                 backup_count: int = 5,
                 encoding: str = 'utf-8'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è writer'–∞
        
        Args:
            filename: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            max_file_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ MB –ø–µ—Ä–µ–¥ —Ä–æ—Ç–∞—Ü–∏–µ–π
            backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö backup —Ñ–∞–π–ª–æ–≤
            encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        """
        self.filename = Path(filename)
        self.max_file_size = max_file_size_mb * 1024 * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–π—Ç—ã
        self.backup_count = backup_count
        self.encoding = encoding
        
        # –ü—Ä–∏–º–∏—Ç–∏–≤—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self._write_lock = threading.RLock()  # Reentrant lock –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self._file_lock = CrossPlatformFileLock(str(self.filename))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._written_count = 0
        self._error_count = 0
        self._is_closed = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.filename.parent.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        self._initialize_file()
        
        logging.info(f"üìù ThreadSafeWriter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.filename}")
    
    def _initialize_file(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        with self._write_lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å JSONL
                if self.filename.exists():
                    self._validate_existing_file()
                    self._update_written_count()
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                    with open(self.filename, 'w', encoding=self.encoding) as f:
                        f.write("")  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                    
                    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {self.filename}")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {self.filename}: {e}")
                raise
    
    def _validate_existing_file(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.filename, 'r', encoding=self.encoding) as f:
                lines = f.readlines()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
            for i, line in enumerate(lines, 1):
                line = line.strip()
                if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    try:
                        json.loads(line)
                    except json.JSONDecodeError as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è JSON —Å—Ç—Ä–æ–∫–∞ {i} –≤ {self.filename}: {e}")
                        
            logging.info(f"‚úÖ –§–∞–π–ª {self.filename} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Å—Ç—Ä–æ–∫: {len(lines)}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {self.filename}: {e}")
            # –°–æ–∑–¥–∞–µ–º backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            self._backup_corrupted_file()
            raise
    
    def _backup_corrupted_file(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            timestamp = int(time.time())
            backup_name = self.filename.with_suffix(f".corrupted.{timestamp}.jsonl")
            self.filename.rename(backup_name)
            logging.warning(f"üì¶ –°–æ–∑–¥–∞–Ω backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_name}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    
    def _update_written_count(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        try:
            with open(self.filename, 'r', encoding=self.encoding) as f:
                lines = [line for line in f.readlines() if line.strip()]
            self._written_count = len(lines)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫: {e}")
            self._written_count = 0
    
    def _needs_rotation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
        try:
            if not self.filename.exists():
                return False
            return self.filename.stat().st_size >= self.max_file_size
        except OSError as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def _rotate_file(self) -> None:
        """–†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        with self._write_lock:
            try:
                if not self._needs_rotation():
                    return
                
                logging.info(f"üîÑ –†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {self.filename} (—Ä–∞–∑–º–µ—Ä: {self.filename.stat().st_size})")
                
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π backup –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                oldest_backup = self.filename.with_suffix(f".{self.backup_count}.jsonl")
                if oldest_backup.exists():
                    oldest_backup.unlink()
                
                # –°–¥–≤–∏–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ backups
                for i in range(self.backup_count - 1, 0, -1):
                    old_backup = self.filename.with_suffix(f".{i}.jsonl")
                    new_backup = self.filename.with_suffix(f".{i + 1}.jsonl")
                    if old_backup.exists():
                        old_backup.rename(new_backup)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π backup
                first_backup = self.filename.with_suffix(".1.jsonl")
                self.filename.rename(first_backup)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                with open(self.filename, 'w', encoding=self.encoding) as f:
                    f.write("")
                
                self._written_count = 0
                logging.info(f"‚úÖ –†–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω backup: {first_backup}")
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                raise
    
    def write_dialog(self, dialog_data: Dict[str, Any]) -> bool:
        """
        –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            dialog_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞
        """
        if self._is_closed:
            logging.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π writer")
            return False
        
        with self._write_lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–æ—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                self._rotate_file()
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
                with self._file_lock:
                    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    json_line = json.dumps(dialog_data, ensure_ascii=False)
                    
                    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                    with open(self.filename, 'a', encoding=self.encoding) as f:
                        f.write(json_line + '\n')
                        f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
                        os.fsync(f.fileno())  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –Ω–æ—Å–∏—Ç–µ–ª—å
                    
                    self._written_count += 1
                    
                    if self._written_count % 100 == 0:
                        logging.info(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ {self._written_count} –¥–∏–∞–ª–æ–≥–æ–≤ –≤ {self.filename}")
                    
                    return True
                    
            except FileLockException as e:
                logging.error(f"üîí –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                self._error_count += 1
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
                self._error_count += 1
                return False
    
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ writer'–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            "filename": str(self.filename),
            "written_count": self._written_count,
            "error_count": self._error_count,
            "is_closed": self._is_closed,
            "file_size_mb": self.filename.stat().st_size / (1024 * 1024) if self.filename.exists() else 0
        }
    
    def close(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ writer'–∞"""
        if self._is_closed:
            return
        
        with self._write_lock:
            try:
                self._is_closed = True
                self._file_lock.release()
                logging.info(f"üîö ThreadSafeWriter –∑–∞–∫—Ä—ã—Ç. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.get_stats()}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ writer'–∞: {e}")
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ context manager"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        self.close()